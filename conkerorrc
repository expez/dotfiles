// -*- mode: js2 -*-
url_remoting_fn = load_url_in_new_buffer;

external_content_handlers.set("application/pdf", "zathura");

//set emacs as external editor
editor_shell_command = "emacsclient -c";

// view source in your editor.
view_source_use_external_editor = true;

//allow for 'contrib' stuff
load_paths.unshift("chrome://conkeror-contrib/content/");

// Mode-line
mode_line_mode(true);

// auto completion in the minibuffer
minibuffer_auto_complete_default = true;
url_completion_use_history = true;
url_completion_use_bookmarks = true;

// tab support
//require("new-tabs.js");
//require("clicks-in-new-buffer.js");
//clicks_in_new_buffer_target = OPEN_NEW_BUFFER_BACKGROUND;
//clicks_in_new_buffer_button = 1; //  midclick links in new buffers with

require("mode-line.js");
// icons in the modeline
//require("mode-line-buttons.js");
//mode_line_add_buttons(standard_mode_line_buttons, true);

add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);

// show currrent-buffer/total-buffer indicator in modeline
add_hook("mode_line_hook", mode_line_adder(buffer_count_widget), true);

remove_hook("mode_line_hook", mode_line_adder(clock_widget));

// bookmarks
define_webjump("conk",  "http://conkeror.org");
define_webjump("ew",    "http://emacswiki.org");
define_webjump("ip",    "http://instapaper.com");
define_webjump("hn",   "http://news.ycombinator.com");
define_webjump("red",   "http://reddit.com");

//Smart links
define_webjump("g", "http://www.google.com/search?q=%s");
define_webjump("w", "http://en.wikipedia.org/w/index.php?search=%s");
define_webjump("gh", "http://github.com/search?q=%s&type=Everything");
define_webjump("a", "http://wiki.archlinux.org/index.php?search=%s");
define_webjump("e", "http://expez.com/w/index.php?search=%s");
define_webjump("so",    "http://stackoverflow.com/search?q=%s");
define_webjump("r",    "http://apidock.com/ruby/search?query=%s");
define_webjump("yt",   "http://www.youtube.com/results?search_query=%s&aq=f");
define_webjump("imdb",  "http://www.imdb.com/find?s=all&q=%s");
define_webjump("d","http://www.thefreedictionary.com/%s");
define_webjump("ud", "http://www.urbandictionary.com/define.php?term=%s");
define_webjump("img", "http://www.google.com/images?q=%s&safe=off", $alternative = "http://www.google.com/imghp?as_q=&safe=off");
define_webjump("am", "http://www.amazon.co.uk/exec/obidos/external-search/?field-keywords=%s&mode=blended");
define_webjump("wolf", "http://www.wolframalpha.com/input/?i=%s");
define_webjump("h", "http://www.haskell.org/hoogle/?q=%s");
define_webjump("l", "http://l1sp.org/search?q=%s");
define_webjump("lo", "https://lobste.rs");
define_webjump("c", "http://clojuredocs.org/search?q=%s");

// reload conkerorrc with C-c r
define_key(default_global_keymap, "C-c r", "reinit");

define_key(default_global_keymap, "j", "cmd_scrollLineDown");
define_key(default_global_keymap, "k", "cmd_scrollLineUp");
define_key(content_buffer_normal_keymap, "C-f", "cmd_scrollPageDown");
define_key(content_buffer_normal_keymap, "C-b", "cmd_scrollPageUp");

var my_closed_buffers = [];

//save the URL of the current buffer before closing it
interactive("my-close-and-save-current-buffer",
            "close and save the current buffer for later restore",
            function(I) {
                if(my_closed_buffers.length==10){
                    my_closed_buffers.shift(); // remove older item to save
                    // memory, just save maximum 10 buffers
                }
                my_closed_buffers.push(I.buffer.document.URL);
                kill_buffer(I.buffer); //kill the current buffer
            });

undefine_key(default_global_keymap, "q");
define_key(default_global_keymap, "q", "my-close-and-save-current-buffer");

interactive("my-open-closed-buffer",
            "open the last closed buffer",
            function(I){
                // check if the array length > 0
                if(my_closed_buffers.length>0){
                    // load the URL in new windows
                    load_url_in_new_buffer(
                        my_closed_buffers[my_closed_buffers.length - 1], I.window);
                    // remove the first item in the array
                    my_closed_buffers.pop();
                }
            });

define_key(default_global_keymap, "Q", "my-open-closed-buffer");

define_key(text_keymap, 'C-w', 'cmd_deleteWordBackward');

//Bind Number Keys to Switch to Buffers 1-10
function define_switch_buffer_key (key, buf_num) {
    define_key(default_global_keymap, key,
               function (I) {
                   switch_to_buffer(I.window,
                                    I.window.buffers.get_buffer(buf_num));
               });
}
for (let i = 0; i < 10; ++i) {
    define_switch_buffer_key(String((i+1)%10), i);
}

// use M-y to google current selection in new buffer
// use M-Y to google current selection in new buffer "double-quoted"

// [ref: http://www.mozdev.org/pipermail/conkeror/2009-February/001334.html ]
// (See also "**c" for selecting text)
interactive("search-clipboard-contents", "Search in Google the content of the X clipboard (the selected text)",
            "find-url",
            $browser_object=
            /*jshint unused:false */
            function(I) {
                return "g "+ read_from_x_primary_selection();
            }
           );
interactive("search-clipboard-contents-doublequoted", "Search in Google the content of the X clipboard (the selected text) as a fixed string",
            "find-url",
            $browser_object=
            function(I) {
                return "g \""+ read_from_x_primary_selection()+"\"";
            }

           );
define_key(content_buffer_normal_keymap, "M-y", "search-clipboard-contents");
define_key(content_buffer_normal_keymap, "M-Y", "search-clipboard-contents-doublequoted");
define_key(content_buffer_normal_keymap, "d", "follow-new-buffer-background");
define_key(content_buffer_normal_keymap, "D", "follow-new-buffer");
define_key(default_global_keymap, "C-x C-m", "execute-extended-command");

define_key(content_buffer_normal_keymap, "C-c C-c", "submit-form");

define_key(default_global_keymap, "C-x 0", "kill-current-buffer");

define_key(content_buffer_normal_keymap, "C-x 1", "kill-other-buffers");

interactive("duplicate-buffer", "Duplicate buffer",
            function (I) {
                browser_object_follow(I.buffer, OPEN_NEW_BUFFER, I.buffer.current_uri.spec);
            });
define_key(content_buffer_normal_keymap, "C-x 2", "duplicate-buffer");

cwd=get_home_directory();
cwd.append("downloads");

// Don't kill last buffer
add_hook("before_quit_hook",
         function () {
             var w = get_recent_conkeror_window();
             var result = (w === null) ||
                     "y" === (yield w.minibuffer.read_single_character_option(
                         $prompt = "Quit Conkeror? (y/n)",
                         $options = ["y", "n"]));
             yield co_return(result);
         });

can_kill_last_buffer = false;

//Go to gmail, bind it to F1. C-u prefix opens in new buffer.
interactive("open-gmail", "Go to gmail", "follow",
            $browser_object = "http://gmail.com/");
define_key(content_buffer_normal_keymap, "f1", "open-gmail");

user_pref("general.warnOnAboutConfig", false);

// from _why
// This one enables Ctrl-Up and Ctrl-Down inside a textarea. So you can stretch the box without reaching for the mouse. How about that!
function resize_textarea_up(field) {
    var h = field.offsetHeight;
    if (h > 120)
        field.style.height = (h - 60) + "px";
}
function resize_textarea_down(field) {
    field.style.height = (parseInt(field.offsetHeight, 10) + 60) + "px";
}
interactive(
    "resize-textarea-up",
    "Resize a textarea to be smaller.",
    function (I) { call_on_focused_field(I, resize_textarea_up); }
);
interactive(
    "resize-textarea-down",
    "Resize a textarea to be taller.",
    function (I) { call_on_focused_field(I, resize_textarea_down); }
);

editor_shell_command = 'emacsclient -c';

//enable sessions
require("session.js");

//Auto-saved sessions reloaded on startup.
session_auto_save_auto_load = true;

// Don't open download window automatically
remove_hook("download_added_hook", open_download_buffer_automatically);

// get tiny url for the current page
// press * q and then c to generate and copy the tinyurl into clipboard
define_browser_object_class(
    "tinyurl", "Get a tinyurl for the current page",
    function (I, prompt) {
        check_buffer(I.buffer, content_buffer);
        let createurl = 'http://tinyurl.com/api-create.php?url=' +
                encodeURIComponent(
                    load_spec_uri_string(
                        load_spec(I.buffer.top_frame)));
        try {
            var content = yield send_http_request(
                load_spec({uri: createurl}));
            yield co_return(content.responseText);
        } catch (e) { }
    });
define_key(content_buffer_normal_keymap, "* q", "browser-object-tinyurl");

define_key(default_global_keymap, "M-h",
           function (I)
           {
               for (var i = 0; i < I.window.buffers.count; i++)
               {
                   stop_loading(I.window.buffers.get_buffer(i));
               }
           });

define_key(default_global_keymap, "M-r",
           function (I)
           {
               for (var i = 0; i < I.window.buffers.count; i++)
               {
                   reload(I.window.buffers.get_buffer(i));
               }
           });


// - Firebug
define_variable("firebug_url",
                "http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js");

function firebug (I) {
    var doc = I.buffer.document;
    var script = doc.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', firebug_url);
    script.setAttribute('onload', 'firebug.init();');
    doc.body.appendChild(script);
}
interactive("firebug", "open firebug lite", firebug);

// user agent switcher
// source: https://github.com/technomancy/dotfiles/blob/master/.conkerorrc
//
var user_agents = { "conkeror": "Mozilla/5.0 (X11; Linux x86_64; rv:8.0.1) " +
                    "Gecko/20100101 conkeror/1.0pre",
                    "chromium": "Mozilla/5.0 (X11; U; Linux x86_64; en-US) " +
                    "AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.63" +
                    " Safari/534.3",
                    "firefox": "Mozilla/5.0 (X11; Linux x86_64; rv:8.0.1) " +
                    "Gecko/20100101 Firefox/8.0.1",
                    "android": "Mozilla/5.0 (Linux; U; Android 2.2; en-us; " +
                    "Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like " +
                    "Gecko) Version/4.0 Mobile Safari/533.1"};

var agent_completer = prefix_completer($completions = Object.keys(user_agents));
interactive("user-agent", "Pick a user agent from the list of presets",
            function(I) {
                var ua = (yield I.window.minibuffer.read(
                    $prompt = "Agent:",
                    $completer = agent_completer));
                set_user_agent(user_agents[ua]);
            });

// - Extensions
session_pref('extensions.checkCompatibility', false);
session_pref("xpinstall.whitelist.required", false);
user_pref("extensions.checkUpdateSecurity", true);

// adblock
require("adblockplus");
try { require("dom-inspector"); } catch (e) {}

/* noscript */
require("noscript");

function ns_allow_perm (url, buffer, P, allow) {
    var ns = noscript_service;
    if (allow) {
        ns.setJSEnabled(url, true);
        setObjectVisibility(buffer.document,showObject);
    } else {
        ns.setJSEnabled(url, false);
        setObjectVisibility(buffer.document,hideObject);
    }
}

interactive("ns-toggle-perm",
            "Allow a site permanently access to javascript",
            function (I) {
                var ns = noscript_service;
                var urls = [];
                var level = ns.getPref("toolbarToggle", 3);
                if (! level)
                    level = 3;
                var url = ns.getQuickSite(I.buffer.document.documentURI, level);
                var url2;
                if (url) {
                    urls.push(url);
                    var scripts = I.buffer.document.getElementsByTagName("script");
                    for (var i = 0, n = scripts.length; i < n; i++) {
                        if (scripts[i].getAttribute("src")) {
                            var matches = scripts[i].getAttribute("src").split("/");
                            if (matches[0] == "http:")
                                urls.push(matches[2]);
                        }
                    }
                    urls = unique(urls);
                    urls = urls.filter(function (u) { return !ns.isJSEnabled(u); });
                    while ((url2 = urls.pop())) {
                        ns_allow_perm(url2, I.buffer, I.P,
                                      "y" == (yield I.minibuffer.read_single_character_option(
                                          $prompt = "Allow " + url2 + "? [y/[n]]",
                                          $options = ["y", "n"])));
                    }
                    reload(I.buffer, I.P);
                }
            });

//mozrepl
user_pref('extensions.mozrepl.autoStart', true);
if ('@hyperstruct.net/mozlab/mozrepl;1' in Cc) {
    let mozrepl = Cc['@hyperstruct.net/mozlab/mozrepl;1']
            .getService(Ci.nsIMozRepl);
    if (! mozrepl.isActive())
        mozrepl.start(4242);
}
let (mozrepl_init = get_home_directory()) {
    mozrepl_init.appendRelativePath(".mozrepl-conkeror.js");
    session_pref('extensions.mozrepl.initUrl', make_uri(mozrepl_init).spec);
}
